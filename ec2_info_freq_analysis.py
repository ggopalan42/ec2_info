#!/usr/bin/python
import sys, os, ConfigParser, argparse, glob

# This program does a frequency analysis of various flags and keywords
# present in the log files generated by EC2_info.py
# The flags to analyze is passed to the program via a config file

def parse_comline_args():
  # Setup Usage and args
  parser = argparse.ArgumentParser(description='Freq analysis of log files')

  parser.add_argument('-c', '--config', metavar='ConfigFile',
                                         dest='config_file',
                                         action='store',
                                         default='ec2_info_freq_analysis.cfg',
                                         help='Config file specifying flags')
  parser.add_argument('-l', '--log', metavar='LogFile',
                                         dest='lfile_names',
                                         action='store',
                                         default='*.log',
                                         help='Log file extension (Eg: *.log)')
  return parser.parse_args()
# end def parse_comline_args()

def get_config(args):
  # Set defaults. Defaults will be overridden if a config file is specified
  # Or if the default config file (ec2_info_default_config.cfg) exists in 
  # current directory
  CPU_Flags={ 'flags': ['aes','hypervisor'] }
  AnalyzeStrings={}

  # Default config file. Later to be passed in as arg
  config_file=args.config_file

  # Setup Config Parser and read in Config file
  config=ConfigParser.ConfigParser()

  # If the config file exists, read it in
  if os.path.exists(config_file):
    config.read(config_file)

    # Get AnalyseStrings
    config_analyze_strings = config.items('AnalyzeStrings')
    for k,v in config_analyze_strings:
      AnalyzeStrings[k]=v.replace(' ','').split(',')

    # Get CPU Flags
    CPU_Flags=  {'flags':
                   config.get('CPU_Flags','flags').replace(' ','').split(',')}
    # CPU_Flags = config_cpu_flags.replace(' ','').split(',')
  # Else run from default specified in this program
  else:
    print 'WARNING: Config file does not exist.'
    print 'Assuming defaults'

  return AnalyzeStrings, CPU_Flags
# End get_config()

def FreqAnalyze(AnalyzeStrings, CPU_Flags, log_files):
  
  # Setup default Analyze Data Structure
  AnalyzeDS={
              'instance type': {
                                 't1.micro':  [0],
                                 'm1.small':  [0],
                                 'm1.medium': [0],
                                 'm1.large':  [0],
                                 'm1.xlarge': [0]
                               },
              'model name':    {
                                 'E5507':   [0],
                                 'E5430':   [0],
                                 'E5645':   [0],
                                 'E5-2650': [0],
                                 '2218':    [0]
                               },
              'aws region':    {
                                 'ap-northeast-1': [0],
                                 'ap-southeast-1': [0],
                                 'ap-southeast-2': [0],
                                 'eu-west-1':      [0],
                                 'sa-east-1':      [0],
                                 'us-east-1':      [0],
                                 'us-west-1':      [0],
                                 'us-west-2':      [0]
                               }
            }

  # For now, use 'Loop Count' as start of record delimiter.
  # Cant use '------------------' because there are two such strings
  # for each record
  record_start_delim = 'Loop Count'

  # Define few other variables
  start_record = False
  found_strings=[]

  # Define the default startwith string for flags
  # Deal with multiple sets of flags later
  flags_starts_with = CPU_Flags.keys().pop()
  flags_to_find = CPU_Flags.values().pop()

  # Get all of the search strings
  # Also extend the Search String freq array by the number of flags
  search_strings=[]
  num_flags = len(CPU_Flags.values().pop())
  for as_key in AnalyzeDS.keys():
    for ss in AnalyzeDS[as_key].keys():
      search_strings.append(ss)
      AnalyzeDS[as_key][ss].extend([ 0 for x in flags_to_find])

  for log_file in log_files:
    with open(log_file,'r') as curr_file:
      for line in curr_file:
        # If you have not found start of record
        if not start_record:
          if line.find(record_start_delim):
           start_record = True 
        # You are processing a record
        else:
          # If the line starts with a 'flag', then process it
          if line.startswith(flags_starts_with):
            # If there are items found agains flags, process them
            if found_strings:
              # Get the flags of interest from the flags line
              found_flags= [x for x in flags_to_find if x in line]
              print found_strings
              print found_flags
              # Now with the found_strings and found_flags, increment
              # the appropriate array positions in AnalyzeDS
              for as_key in AnalyzeDS.keys():
                for fs in found_strings:
                  if fs in AnalyzeDS[as_key]:
                    # Increment the found string position, which is 0
                    AnalyzeDS[as_key][fs][0] += 1 
                    for ff in found_flags:
                      AnalyzeDS[as_key][fs][flags_to_find.index(ff)+1] += 1 
                 
            else:
              print 'Error: Found CPU flags but but there are no \
                                                 items to analyze them by'
          # Find any of the keys in AnalyzeStrings and process them
          elif any(sk in line.lower() for sk in AnalyzeDS.keys()):
            fs = [x for x in search_strings if x in line].pop()
            found_strings.append(fs)
					# Flag(s) have not been found in this record, so simply set
					# start_record back to FALSE, clear found_strings and continue
					# Note: Temoprarily using 'traceroute' to figure end of record.
					#       This will not always be correct
          elif 'traceroute' in line:
          # elif line.startswith('----------------------------------------'): 
            found_strings=[]
            start_record = False
    # File will auto close here
  return AnalyzeDS
# end FreqAnalyze()

def print_freq_results (CPU_Flags, AnalyzeDS):

  print '%21s'%'Total',
  flags_to_find = CPU_Flags.values().pop()
  for ff in flags_to_find:
    print '%12s' %ff,
  print

  for as_key in sorted(AnalyzeDS):
    for ss_key in sorted(AnalyzeDS[as_key]):
      print '%-18s' %(ss_key),
      for lst_indx in AnalyzeDS[as_key][ss_key]:
        print '%-12s' %lst_indx, 
      print 
# end print_freq_results

if __name__ == '__main__':
  args = parse_comline_args()

  # Get the flags and strings to analyze from config file
  AnalyzeStrings, CPU_Flags = get_config(args)

  # Analyze the log files
  log_files = glob.glob(args.lfile_names)
  if log_files:
    analysis_result = FreqAnalyze(AnalyzeStrings, CPU_Flags, log_files)
    print_freq_results (CPU_Flags, analysis_result)
  else:
    print 'No log files found!'

